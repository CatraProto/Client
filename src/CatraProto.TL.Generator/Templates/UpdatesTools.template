//auto-generated
using System;
using System.Collections.Generic;
using CatraProto.TL.Interfaces;

namespace CatraProto.Client.Updates
{
    static partial class UpdatesTools
    {
        public static void ExtractChats(CatraProto.TL.Interfaces.IObject obj, out System.Collections.Generic.IList<CatraProto.Client.TL.Schemas.CloudChats.ChatBase>? chatsVector, out System.Collections.Generic.IList<CatraProto.Client.TL.Schemas.CloudChats.UserBase>? usersVector)
        {
            chatsVector = null;
            usersVector = null;

            switch(obj)
            {
                ^VectorChatsConditions^
            }

        }

        public static bool TryExtractPeerId(CatraProto.TL.Interfaces.IObject update, out CatraProto.Client.MTProto.PeerId? peerId)
        {
            switch(update)
            {
                ^PeerConditions^
            }
            
            peerId = null;
            return false;
        }        
        
        public static bool TryExtractQts(CatraProto.TL.Interfaces.IObject update, out int? qts)
        {
            switch(update)
            {
                ^QtsConditions^
            }
            
            qts = null;
            return false;
        }
        
        public static bool TryExtractPts(CatraProto.TL.Interfaces.IObject update, out int? pts, out int? ptsCount)
        {
            switch(update)
            {
                ^PtsConditions^
            }
            
            pts = null;
            ptsCount = null;
            return false;
        }

        public static void OnFileReceived(CatraProto.TL.Interfaces.IObject socketObject, CatraProto.TL.Interfaces.IObject context, bool preserveContext, List<IObject>? tree = null, Action<IObject, IObject, List<IObject>>? callback = null)
        {
            callback ??= (cSocketObject, cContext, cTree) => CatraProto.Client.ApiManagers.Files.FileLocation.UpdateId(cSocketObject, cContext, cTree);
            if (tree is null)
            {
                tree ??= new List<IObject>();
                if (context is not CatraProto.Client.TL.Schemas.CloudChats.Document && socketObject is not CatraProto.Client.TL.Schemas.CloudChats.Photo)
                {
                    tree.Add(context);
                }
                
                if (socketObject is not CatraProto.Client.TL.Schemas.CloudChats.Document && socketObject is not CatraProto.Client.TL.Schemas.CloudChats.Photo && socketObject != context)
                {
                    tree.Add(socketObject);
                }
            }
            
            switch(socketObject)
            {
                ^FileConditions^
            }
        }
    }
}